#JDBC (Java DataBase Connetctivity)
  : 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API
    자바에서 데이터베이스와 연결을 설정하고 sql쿼리 실생하여 데이터를 조회, 삽입, 수정, 삭제 가능

  '주요 사용클래스와 인터페이스
    1. Connection : 데이터베이스와 연결을 나타내는 인터페이스
                    데이터베이스 연결을 설정하고 관리하는데 사용
       DriverManager: 데이터베이스 드라이버를 관리하고 데이터베이스와 연결을 설정하는데 사용
       String url = "jdbc:oralcle:thin@localhost:1521:xe";
       Connection con = DriverManager.getConnection(url, user, password);

       jdbc:oralcle:thin -> JDBC URL의 프로토콜 부분을 나타냄. ORACLE JDBC드라이버가 "thin" 연결 방식을 사용해서 데이터베이스에
                            연결할 것임을 나타냄 (*프로토콜:데이터의 교환 방식을 정의하는 규칙 체계)
       @localhost:1521:xe -> 호스트, 포트, Oracle 서비스 이름 지점(SID)

       Oracle JDBC 드라이버의 연결 유형
            1. Thin : 데이터베이스에 연결하기 위해서 클라이어트 시스템을 따로 설치할 필요 없음
                      jdbc:oracle:thin:@<hostname>:<port>:<SID>
            2. OCL : 데이터베이스에 연결하기 위해 클라이언트 라이브러리를 따로 설치해야함
                      jdbc:oracle:oci@<TNS_NAME>
    2. Statement : SQL 쿼리를 실행하는데 사용되는 인터페이스, 주로 동적쿼리를 실행하는데 사용 
       PreparedStatment : 미리 컴파일된 SQL 쿼리를 실행하는데 사용되는 인터페이스, 쿼리에 매개변수를 전달하기 쉽고 SQL 인젝션 공격을 방지
                          *인젝션 : 공격자가 신뢰할 수 없는 입력을 프로그램에 주입하도록 하는 공격
    3. ResultSet: SQL의 실행 결과를 나타내는 인터페이스
                  결과 집합에서 데이터를 검색하고 처리하는데 사용
                  isBeforeFirst(): resultset에서 데이터가 없는 경우를 확인하기 위해 사용.
  
  '예제코드:
      String driver = "oracle.jdbc.driver.OracleDriver";
      String url = "jdbc:oralcle:thin@localhost:1521:xe";
      String user = "유저이름";
      String password = "비밀번호";

      Class.forName(driver);//JDBC드라이버 클래스를 동적으로 로드하는데 사용
      Connection con = DriverManager.getConnection(url, user, password);
      PreparedStatment selectStateMent = con.preparedStatment(쿼리변수);
      ResultSet resultSet = selectStateMent.executeQuery();//결과집합 반환
      
